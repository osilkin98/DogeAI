import os

target_file, current_directory = "/src/keys.py", os.getcwd()

# values in this dict that are empty are meant to be set in the main_install function
key_attributes = {"consumer_key": "",
                  "consumer_secret": "",
                  "access_token": "",
                  "access_token_secret": "",
                  "log_username": "",
                  "listen_username": "",
                  "training_set_path": "{}/trained_doge/".format(os.getcwd()),
                  "doge_version": "1.1.0"}

generation_message = "# This file has been automatically generated by install.py\n\n"


# Set the values to the outfile object
def set_values(outfile):
    outfile.write(generation_message)
    # Go through the dict of values to be set and prompt the user to enter the ones left empty
    for setting, value in key_attributes.items():
        # if the length of the value is 0, we ask the user to input it
        if len(value) == 0:
            value = input("set the value for {}: ".format(setting)).replace(" ", "")
        outfile.write("{} = \"{}\"\n".format(setting, value))


# Main installation function
def main_install():
    selection = 'y'
    install_failed = False

    try:
        with open(file="{}{}".format(current_directory, target_file), mode='x') as outfile:
            set_values(outfile)

    except FileExistsError:
        selection = input("{}{} already exists, are you sure you want to reinstall? [y/n]: ".format(
            current_directory, target_file)).lower().replace(" ", "")
        install_failed = True

    finally:
        if install_failed and selection[0] == 'y':
            with open(file='{}{}'.format(current_directory, target_file), mode='w') as outfile:
                set_values(outfile)
            print("Done, wrote file {}{}".format(current_directory, target_file))
        elif not install_failed:
            print("Written {}{}".format(current_directory, target_file))
        else:
            print("Aborted reinstall")


# If the file is being run as an install
if __name__ == "__main__":
    main_install()